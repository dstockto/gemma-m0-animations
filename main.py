import time

import adafruit_ht16k33.matrix
import board
import busio as io
import touchio

touch = touchio.TouchIn(board.D1)

i2c = io.I2C(board.SCL, board.SDA)
matrix = adafruit_ht16k33.matrix.Matrix8x8(i2c)

x_pix = y_pix = 8
matrix.fill(0) 

xMask = [
0b10000000,
0b01000000,
0b00100000,
0b00010000,
0b00001000,
0b00000100,
0b00000010,
0b00000001,
]

f = [[
  0b00000100,
  0b00011110,
  0b01111110,
  0b10100010,
  0b10100010,
  0b10100010,
  0b01101010,
  0b00111110
],[
  0b00000100,
  0b00011110,
  0b01111110,
  0b10100010,
  0b10100010,
  0b10110110,
  0b01100010,
  0b00111110
],[
  0b00000100,
  0b00011110,
  0b01111110,
  0b10100010,
  0b10110110,
  0b10100010,
  0b01100010,
  0b00111110
],[
  0b00000100,
  0b00011110,
  0b01111110,
  0b10101010,
  0b10100010,
  0b10100010,
  0b01100010,
  0b00111110
],[
  0b00000100,
  0b00001111,
  0b00111111,
  0b01010101,
  0b01010001,
  0b01010001,
  0b00110001,
  0b00011111
],[
  0b00000010,
  0b00000111,
  0b00011111,
  0b00101010,
  0b00101000,
  0b00101000,
  0b00011100,
  0b00001111
],[
  0b00000001,
  0b00000011,
  0b00001111,
  0b00010101,
  0b00010100,
  0b00010101,
  0b00001100,
  0b00000111
],[
  0b00000000,
  0b00000001,
  0b00000111,
  0b00001010,
  0b00001011,
  0b00001010,
  0b00000110,
  0b00000011
],[
  0b00000000,
  0b00000000,
  0b00000011,
  0b00000101,
  0b00000101,
  0b00000101,
  0b00000011,
  0b00000001
],[
  0b00000000,
  0b00000000,
  0b00000001,
  0b00000010,
  0b00000010,
  0b00000010,
  0b00000001,
  0b00000000
],[
  0b00000000,
  0b00000000,
  0b00000000,
  0b00000001,
  0b00000001,
  0b00000001,
  0b00000000,
  0b00000000
],[
  0b00000000,
  0b00000000,
  0b00000000,
  0b00000000,
  0b00000000,
  0b00000000,
  0b00000000,
  0b00000000
],[
  0b11111100,
  0b11000010,
  0b11000011,
  0b11111111,
  0b11000010,
  0b11000011,
  0b11111110,
  0b11111100
],[
  0b11111000,
  0b10000100,
  0b10000110,
  0b11111110,
  0b10000100,
  0b10000110,
  0b11111100,
  0b11111000
],[
  0b11110001,
  0b00001001,
  0b00001101,
  0b11111101,
  0b00001001,
  0b00001101,
  0b11111001,
  0b11110001
],[
  0b11100011,
  0b00010011,
  0b00011011,
  0b11111011,
  0b00010011,
  0b00011011,
  0b11110011,
  0b11100011
],[
  0b11000111,
  0b00100111,
  0b00110110,
  0b11110111,
  0b00100110,
  0b00110110,
  0b11100111,
  0b11000111
],[
  0b10001111,
  0b01001111,
  0b01101100,
  0b11101111,
  0b01001100,
  0b01101100,
  0b11001111,
  0b10001111
],[
  0b00011111,
  0b10011111,
  0b11011000,
  0b11011110,
  0b10011000,
  0b11011000,
  0b10011111,
  0b00011111
],[
  0b00111110,
  0b00111110,
  0b10110000,
  0b10111100,
  0b00110000,
  0b10110000,
  0b00111110,
  0b00111110
],[
  0b01111101,
  0b01111101,
  0b01100001,
  0b01111001,
  0b01100001,
  0b01100001,
  0b01111101,
  0b01111101
],[
  0b11111011,
  0b11111011,
  0b11000011,
  0b11110011,
  0b11000011,
  0b11000011,
  0b11111011,
  0b11111011
],[
  0b11110111,
  0b11110111,
  0b10000110,
  0b11100111,
  0b10000110,
  0b10000110,
  0b11110111,
  0b11110111
],[
  0b11101111,
  0b11101111,
  0b00001100,
  0b11001111,
  0b00001100,
  0b00001100,
  0b11101111,
  0b11101111
],[
  0b11011111,
  0b11011111,
  0b00011000,
  0b10011110,
  0b00011000,
  0b00011000,
  0b11011111,
  0b11011111
],[
  0b10111110,
  0b10111110,
  0b00110000,
  0b00111100,
  0b00110000,
  0b00110000,
  0b10111110,
  0b10111110
],[
  0b01111101,
  0b01111101,
  0b01100001,
  0b01111001,
  0b01100001,
  0b01100001,
  0b01111101,
  0b01111101
],[
  0b11111011,
  0b11111011,
  0b11000011,
  0b11110011,
  0b11000011,
  0b11000011,
  0b11111011,
  0b11111011
],[
  0b11110111,
  0b11110111,
  0b10000110,
  0b11100110,
  0b10000111,
  0b10000110,
  0b11110110,
  0b11110110
],[
  0b11101111,
  0b11101111,
  0b00001100,
  0b11001100,
  0b00001111,
  0b00001100,
  0b11101100,
  0b11101100
],[
  0b11011111,
  0b11011111,
  0b00011000,
  0b10011000,
  0b00011111,
  0b00011001,
  0b11011000,
  0b11011000
],[
  0b10111110,
  0b10111111,
  0b00110001,
  0b00110001,
  0b00111110,
  0b00110011,
  0b10110001,
  0b10110001
],[
  0b01111100,
  0b01111110,
  0b01100011,
  0b01100010,
  0b01111100,
  0b01100110,
  0b01100010,
  0b01100011
],[
  0b11111000,
  0b11111100,
  0b11000110,
  0b11000100,
  0b11111000,
  0b11001100,
  0b11000100,
  0b11000110
],[
  0b11110000,
  0b11111000,
  0b10001100,
  0b10001001,
  0b11110001,
  0b10011001,
  0b10001000,
  0b10001100
],[
  0b11100000,
  0b11110000,
  0b00011001,
  0b00010010,
  0b11100010,
  0b00110010,
  0b00010001,
  0b00011000
],[
  0b11000000,
  0b11100000,
  0b00110011,
  0b00100101,
  0b11000101,
  0b01100101,
  0b00100011,
  0b00110001
],[
  0b10000000,
  0b11000001,
  0b01100111,
  0b01001010,
  0b10001010,
  0b11001010,
  0b01000110,
  0b01100011
],[
  0b00000000,
  0b10000011,
  0b11001111,
  0b10010100,
  0b00010100,
  0b10010100,
  0b10001100,
  0b11000111
],[
  0b00000000,
  0b00000111,
  0b10011111,
  0b00101000,
  0b00101000,
  0b00101000,
  0b00011000,
  0b10001111
],[
  0b00000000,
  0b00001110,
  0b00111111,
  0b01010001,
  0b01010001,
  0b01010001,
  0b00110001,
  0b00011111
],[
  0b00000000,
  0b00011100,
  0b01111110,
  0b10100010,
  0b10100010,
  0b10100010,
  0b01100010,
  0b00111110
],[
  0b00000000,
  0b00011100,
  0b01111110,
  0b10100010,
  0b10100010,
  0b10100010,
  0b01110010,
  0b00111110
],[
  0b00011100,
  0b01111110,
  0b10100010,
  0b10100010,
  0b10101010,
  0b01100010,
  0b00111110,
  0b00000000
],[
  0b01111110,
  0b10100010,
  0b10110010,
  0b10100110,
  0b01100010,
  0b00111110,
  0b00000000,
  0b00000000
],[
  0b10101010,
  0b10100110,
  0b10100010,
  0b01100010,
  0b00111110,
  0b00000000,
  0b00000000,
  0b01111100
],[
  0b10100110,
  0b10100010,
  0b01100010,
  0b00111110,
  0b00000000,
  0b00000000,
  0b01111100,
  0b11111110
],[
  0b10100010,
  0b01100010,
  0b00111110,
  0b00000000,
  0b00000000,
  0b01111100,
  0b11111110,
  0b11000011
],[
  0b01100010,
  0b00111110,
  0b00000000,
  0b00000000,
  0b01111100,
  0b11111110,
  0b11000011,
  0b11000000
],[
  0b00111110,
  0b00000000,
  0b00000000,
  0b01111100,
  0b11111110,
  0b11000011,
  0b11000000,
  0b11001111
],[
  0b00000000,
  0b00000000,
  0b01111100,
  0b11111110,
  0b11000011,
  0b11000000,
  0b11001111,
  0b11000011
],[
  0b00000000,
  0b01111100,
  0b11111110,
  0b11000011,
  0b11000000,
  0b11001111,
  0b11000011,
  0b11111110
],[
  0b01111100,
  0b11111110,
  0b11000011,
  0b11000000,
  0b11001111,
  0b11000011,
  0b11111110,
  0b01111100
],[
  0b11110000,
  0b11111000,
  0b00001100,
  0b00000000,
  0b00111100,
  0b00001100,
  0b11111000,
  0b11110000
],[
  0b11000011,
  0b11100011,
  0b00110011,
  0b00000011,
  0b11110011,
  0b00110011,
  0b11100011,
  0b11000011
],[
  0b00001111,
  0b10001111,
  0b11001100,
  0b00001111,
  0b11001100,
  0b11001100,
  0b10001111,
  0b00001111
],[
  0b00111110,
  0b00111110,
  0b00110000,
  0b00111100,
  0b00110000,
  0b00110000,
  0b00111110,
  0b00111110
],[
  0b11111011,
  0b11111011,
  0b11000011,
  0b11110011,
  0b11000011,
  0b11000011,
  0b11111011,
  0b11111011
],[
  0b11101111,
  0b11101111,
  0b00001100,
  0b11001111,
  0b00001100,
  0b00001100,
  0b11101111,
  0b11101111
],[
  0b10111110,
  0b10111110,
  0b00110000,
  0b00111100,
  0b00110000,
  0b00110000,
  0b10111110,
  0b10111110
],[
  0b11111011,
  0b11111011,
  0b11000011,
  0b11110011,
  0b11000011,
  0b11000011,
  0b11111011,
  0b11111011
],[
  0b11101100,
  0b11101100,
  0b00001101,
  0b11001111,
  0b00001111,
  0b00001101,
  0b11101100,
  0b11101100
],[
  0b10110001,
  0b10110011,
  0b00110111,
  0b00111100,
  0b00111100,
  0b00110110,
  0b10110111,
  0b10110011
],[
  0b11000101,
  0b11001101,
  0b11011101,
  0b11110000,
  0b11110000,
  0b11011000,
  0b11011101,
  0b11001101
],[
  0b00010111,
  0b00110111,
  0b01110110,
  0b11000011,
  0b11000000,
  0b01100000,
  0b01110110,
  0b00110111
],[
  0b01011111,
  0b11011111,
  0b11011000,
  0b00001110,
  0b00000011,
  0b10000001,
  0b11011011,
  0b11011111
],[
  0b10111110,
  0b10111110,
  0b10110000,
  0b00011100,
  0b00000110,
  0b00000010,
  0b10110110,
  0b10111110
]]

smile = [[
  0b00111100,
  0b01000010,
  0b10100101,
  0b10000001,
  0b10100101,
  0b10011001,
  0b01000010,
  0b00111100
]]

alien = [
[0b00011000,
 0b00111100,
 0b01111110,
 0b11011011,
 0b11111111,
 0b00100100,
 0b01011010,
 0b10100101],
[0b00011000,
 0b00111100,
 0b01111110,
 0b11011011,
 0b11111111,
 0b00100100,
 0b01011010,
 0b01000010],
[0b00011000,
 0b00111100,
 0b01111110,
 0b11011011,
 0b11111111,
 0b00100100,
 0b01011010,
 0b10100101],
[0b00011000,
 0b00111100,
 0b01111110,
 0b11011011,
 0b11111111,
 0b00100100,
 0b01011010,
 0b01000010],
]

def standard(x, y, pixel):
  return x, y, pixel

def invertPixel(x, y, pixel):
  return x, y, not pixel

def rotateLeft(x, y, pixel):
  return 7-y, x, pixel

def rotateRight(x, y, pixel):
  return y, 7-x, pixel

def rotate180(x, y, pixel):
  return 7-x, 7-y, pixel

def play(frames = f, delay = .05, rotate = standard):
  for frame in frames:
    for y, row in enumerate(frame):
      for x, mask in enumerate(xMask):
        pixel=row&mask==mask
        
        xPix, yPix, pixel = rotate(x, y, pixel)

        if pixel:
          matrix.pixel(xPix, yPix, 1)
        else:
          matrix.pixel(xPix, yPix, 0)
  matrix.show()
  time.sleep(delay) 

stopped = False
sleepCount = 0
touchCount = 0
while True:
  if not stopped:
    play()
    play(f[::-1])
    play(rotate=invertPixel)
    play(f[0:5], .1, rotate=rotateRight)
    play(f[0:5], .1, rotate=rotate180)
    play(f[0:5], .1, rotate=rotateLeft)
    play()
    stopped=True
  else:
    matrix.fill(0)
    matrix.show() 

    time.sleep(2)
    sleepCount = sleepCount + 1
    
    if touch.value:
      stopped = False
      
      if touchCount == 0:
        play(smile, delay=2)
      else:
        play(alien, delay=1)
      touchCount = 1 - touchCount   
      sleepCount=0

    if sleepCount >= 15:
      stopped = False  
      sleepCount = 0